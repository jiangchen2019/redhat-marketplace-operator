name: Test

on:
  push:
    branches: [master, develop, 'feature/buildAndTest']
    tags:
      - '*'
  pull_request:
    branches: [master, develop, feature/**, hotfix/**, release/**, bugfix/**]

env:
  pushImage: true
  cache: true
  #IMAGE_REGISTRY: quay.io/zach-source
  #IMAGE_REGISTRY: quay.io/rh-marketplace

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache go modules
        uses: actions/cache@v1
        if: env.cache == 'true'
        env:
          cache-name: cache-go-modules
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go mod download

      - name: Test
        run: make test

      - name: Get Version
        id: version
        run: |
          echo "::set-output name=version::$(make current-version)"

      - name: Get Tag
        id: tag
        run: |
          echo "::set-output name=tag::sha-$(git rev-parse --short HEAD)"

  deploy-quay:
    name: Deploy Quay
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    env:
      OPERATOR_IMAGE: redhat-marketplace-operator:${{ needs.build.outputs.tag }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache go modules
        uses: actions/cache@v1
        if: env.cache == 'true'
        env:
          cache-name: cache-go-modules
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: make build

      - name: Login
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets.quayUser }}
          DOCKER_PASSWORD: ${{ secrets.quayPassword }}
          REGISTRY: quay.io

      - name: Echoing image name
        run: echo ${OPERATOR_IMAGE}

      - name: Deploy Quay
        if: env.pushImage == 'true'
        run: make tag-and-push
        env:
          TAG: quay.io/rh-marketplace/redhat-marketplace-operator:${{ needs.build.outputs.tag }}

  deploy-pc:
    name: Deploy Red Hat Scan
    runs-on: ubuntu-latest
    needs: [build]
    env:
      OPERATOR_IMAGE: redhat-marketplace-operator:${{ needs.build.outputs.tag }}
    if: github.event_name == 'push'
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache go modules
        uses: actions/cache@v1
        if: env.cache == 'true'
        env:
          cache-name: cache-go-modules
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: make build

      - name: Login
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets.pcUser }}
          DOCKER_PASSWORD: ${{ secrets.pcPassword }}
          REGISTRY: scan.connect.redhat.com

      - name: Echoing image name
        run: echo ${OPERATOR_IMAGE}

      - name: Deploy PC
        if: env.pushImage == 'true'
        run: make tag-and-push
        env:
          TAG: scan.connect.redhat.com/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd/redhat-marketplace-operator:${{ needs.build.outputs.tag }}

